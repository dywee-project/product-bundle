<?php

namespace Dywee\ProductBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BaseProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseProductRepository extends EntityRepository
{
    public function searchBy($data)
    {
        /*$query = $this->createQueryBuilder('p')
            ->select('p');

        foreach($data as $property => $value)
            $query->andWhere($property. ' = ')

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getResult();*/
    }

    public function findByCategory($category){
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->leftJoin('p.categories', 'c')
            ->addSelect('c');

        $query = $query->add('where', $query->expr()->in('c', ':c'))
            ->setParameter('c', $category)
            ->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getResult();
    }

    public function countByCategoriesId($categoriesId = null, $type = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('count(p)');

        $params = array();

        if($type != null)
        {
            $qb->where('p.productType = :type');
            $params['type'] = $type;
        }

        $i = 1;

        foreach($categoriesId as $key => $value)
        {
            $qb->innerjoin('p.categories', 'c'.$i);
            if($i == 1)
                $qb->where('c'.$i.'.id = :cat1');
            else $qb->andWhere('c'.$i.'.id = :cat'.$i);
            $params['cat'.$i] = $value;
            $i++;
        }
        $qb->setParameters($params);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByCategoriesId(array $categoriesId, $type = null, $limit = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->join('p.images', 'i')
            ->addselect('i');

        $params = array();

        if($type != null)
        {
            $qb->where('p.productType = :type');
            $params['type'] = $type;
        }


        $i = 1;

        foreach($categoriesId as $key => $value)
        {
            $qb->innerjoin('p.categories', 'c'.$i);
            $qb->andWhere('c'.$i.'.id = :cat'.$i);
            $params['cat'.$i] = $value;
            $i++;
        }
        $qb->setParameters($params);
            $qb->orderBy('p.name')
            ->setFirstResult($offset)->setMaxResults($limit);

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getResult();
    }


    public function getByDisplayOrder($type, $limit = null, $order = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->join('p.images', 'i')
            ->addselect('i')
            ->where('p.productType = :productType and p.state = 1');

        if($order == 'db')
            $qb->andWhere('p.displayOrder >= 1');
        else $qb->orderBy($order, 'desc');

        $qb->setParameters(
            array(
                'productType'   => $type,
            )
        );

        $qb->orderBy('p.name');

        if(is_numeric($limit)) $qb->setMaxResults($limit);

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getArrayResult();
    }

    public function findBySeoUrl($url)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->join('p.images', 'i')
            ->addselect('i')
            ->where('p.seoUrl = :seoUrl and p.website = :website')
            ->setParameters(array('seoUrl' => $url));

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getSingleResult();
    }

    public function myFindById($id)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->join('p.images', 'i')
            ->addselect('i');

        if(is_numeric($id))
            $qb->where('p.id = :id')->setParameter('id', $id);
        else
            $qb->where('p.id in (:id)')->setParameter('id', $id);

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getResult();
    }

    public function countByState($state = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('COUNT(p)');

        if($state != null)
            $qb->where('p.state = :state')
                ->setParameter('state', $state);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getSelectList()
    {
        $qb = $this->createQueryBuilder('p')
            ->innerJoin('p.event', 'e')
            ->addSelect('e')
        ;

        return $qb;
    }

    public function findAllWithoutSubscription()
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.recurrence is null');
        return $qb;
    }

    public function findForHomepage()
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->orderBy('p.name')
        ;

        return $qb->getQuery()->getResult();
    }
}
